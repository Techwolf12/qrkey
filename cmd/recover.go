package cmd

import (
	"fmt"
	"github.com/techwolf12/qrkey/pkg/helpers"

	"github.com/spf13/cobra"

	"bufio"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"io"
	"os"
	"strings"
)

func recoverFromQR(cmd *cobra.Command, args []string) {
	inputFile, err := helpers.FlagLookup(cmd, "in")
	if err != nil {
		panic(err)
	}

	var lines []string

	if inputFile != "" {
		lines, err = readLinesFromFile(inputFile)
		if err != nil {
			panic(err)
		}
	} else {
		lines, err = readLinesFromStdin()
		if err != nil {
			panic(err)
		}
	}

	if len(lines) == 0 {
		fmt.Println("No input lines found.")
		os.Exit(1)
	}

	var meta Metadata
	err = json.Unmarshal([]byte(lines[0]), &meta)
	if err != nil {
		fmt.Println("First line is not valid metadata JSON.")
		os.Exit(1)
	}

	fmt.Printf("Filename: %s\nSHA256: %s\nQR codes: %d\n", meta.Filename, meta.SHA256, meta.QRCount)

	for len(lines) < meta.QRCount {
		fmt.Printf("Enter QR code %d/%d: ", len(lines)+1, meta.QRCount)
		reader := bufio.NewReader(os.Stdin)
		l, _ := reader.ReadString('\n')
		lines = append(lines, strings.TrimSpace(l))
	}

	b64 := strings.Join(lines[1:meta.QRCount], "")

	data, err := base64.StdEncoding.DecodeString(b64)
	if err != nil {
		fmt.Println("Base64 decode error:", err)
		os.Exit(1)
	}

	hash := sha256.Sum256(data)
	hashStr := fmt.Sprintf("%x", hash[:])
	if hashStr != meta.SHA256 {
		fmt.Println("SHA256 mismatch! File may be corrupted.")
	}

	err = os.WriteFile(meta.Filename, data, 0644)
	if err != nil {
		fmt.Println("Error writing file:", err)
		os.Exit(1)
	}
	fmt.Printf("File written: %s\n", meta.Filename)
}

func readLinesFromFile(filename string) ([]string, error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return readLines(f)
}

func readLinesFromStdin() ([]string, error) {
	fmt.Println("Paste each QR code content (one per line, metadata first):")
	return readLines(os.Stdin)
}

func readLines(r io.Reader) ([]string, error) {
	var lines []string
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			lines = append(lines, line)
		}
	}
	return lines, scanner.Err()
}

var recoverCmd = &cobra.Command{
	Use:   "recover",
	Short: "Recover data from QR codes",
	Long: `Recover data from QR codes generated by the qrkey tool.
This command reads QR codes from a file or stdin, reconstructs the base64 data.
It verifies the SHA256 checksum and writes the original file to disk.`,
	Example: `qrkey recover --in qr_codes.txt`,
	Run:     recoverFromQR,
}

func init() {
	rootCmd.AddCommand(recoverCmd)

	recoverCmd.Flags().StringP("in", "i", "", "Input file with one line per QR (optional)")
	err := recoverCmd.MarkFlagFilename("in", "*")
	if err != nil {
		panic(err)
	}
}
